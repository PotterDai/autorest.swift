{% include "Header_Snippet.stencil" %}

{% include "CoreData_Import_Snippet.stencil" %}

import {{ packageName }}
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

{{ model.comment }}
extension Managed{{ model.name }} : Identifiable {
    public convenience init(plainModel: {{ model.name }}?, context: NSManagedObjectContext?) {
        let entity = NSEntityDescription.entity(forEntityName: "Managed{{ model.name }}", in: context!)
        self.init(entity: entity!, insertInto: context)

        {% for property in model.properties %}
        {% if property.isEnumType %}
            {% if property.isGroupType %}
            self.{{ property.name }} = plainModel?.{{ property.name }}{{ property.optional|optionalMark }}.compactMap({ $0.rawValue })
            {% else %}
            self.{{ property.name }} = plainModel?.{{ property.name }}{{ property.optional|optionalMark }}.rawValue
            {% endif %}
        {% elif property.isDateType %}
            {% if property.isGroupType %}
            self.{{ property.name }} = plainModel?.{{ property.name }}{{ property.optional|optionalMark }}.compactMap({ $0.value })
            {% else %}
            self.{{ property.name }} = plainModel?.{{ property.name }}{{ property.optional|optionalMark }}.value
            {% endif %}
        {% elif property.isBasicType %}
            self.{{ property.name }} = plainModel?.{{ property.name }}
        {% else %}
            {% if property.isGroupType %}
            self.{{ property.name }} = NSOrderedSet(array: plainModel?.{{ property.name }}{{ property.optional|optionalMark }}.compactMap({ Managed{{ property.elementClassName }}(plainModel: $0, context: context) }) ?? [])
            {% else %}
            self.{{ property.name }} = Managed{{ property.className }}(plainModel: plainModel?.{{ property.name }}, context: context)
            {% endif %}
        {% endif %}
        {% endfor %}
    }

    func toPlainModel() -> {{ model.name }} {
        let plainModel = {{ model.name }}(
            {% for property in model.properties %}
            {% if property.isEnumType %}
                {% if property.isGroupType %}
                {{ property.name }}: self.{{ property.name }}{{ property.optional|optionalMark }}.compactMap({ {{ property.className }}(rawValue: $0)}){% if not forloop.last %},{% endif %}
                {% else %}
                {{ property.name }}: {{ property.className }}(rawValue: self.{{ property.name }}){% if not forloop.last %},{% endif %}
                {% endif %}
            {% elif property.isDateType %}
                {% if property.isGroupType %}
                {{ property.name }}: self.{{ property.name }}{{ property.optional|optionalMark }}.compactMap({ Iso8601Date($0) }){% if not forloop.last %},{% endif %}
                {% else %}
                {{ property.name }}: Iso8601Date(self.{{ property.name }}){% if not forloop.last %},{% endif %}
                {% endif %}
            {% elif property.isBasicType %}
                {{ property.name }}: self.{{ property.name }}{% if not forloop.last %},{% endif %}
            {% else %}
                {% if property.isGroupType %}
                {{ property.name }}: {{ property.name }}{{ property.optional|optionalMark }}.compactMap{ ($0 as! Managed{{ property.elementClassName }}).toPlainModel() }{% if not forloop.last %},{% endif %}
                {% else %}
                {{ property.name }}: {{ property.name }}{{ property.optional|optionalMark }}.toPlainModel(){% if not forloop.last %},{% endif %}
                {% endif %}
            {% endif %}
            {% endfor %}
        )
        return plainModel
    }
}
